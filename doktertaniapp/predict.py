import pickle

def predict_disease(symptoms):
    with open('data.pkl', 'rb') as f:
        data = pickle.load(f)

    plant_conditions = data['plant_conditions']
    diseases = data['diseases']

    matching_conditions = set([condition['kode_gejala'] for condition in plant_conditions if condition['gejala'] in symptoms])

    rules = {
    'R98': (['G12'], 'P1'),
    'R99': (['G13'], 'P1'),
    'R1': (['G12', 'G13'], 'P1'),
    'R2': (['G1', 'G2', 'G6', 'G7', 'G12', 'G14'], 'P2'),
    'R3': (['G3'], 'P3'),
    'R4': (['G4', 'G8', 'G15'], 'P4'),
    'R5': (['G7', 'G9'], 'P5'),
    'R6': (['G10', 'G11'], 'P6'),
    'R7': (['G4'], 'P7'),
    'R8': (['G13'], 'P8'),
    'R9': (['G5', 'G11', 'G17'], 'P9'),
    'R10': (['G1', 'G2'], 'P2'),
    'R11': (['G1', 'G6'], 'P2'),
    'R12': (['G1', 'G7'], 'P2'),
    'R13': (['G1', 'G12'], 'P2'),
    'R14': (['G1', 'G14'], 'P2'),
    'R15': (['G2', 'G6'], 'P2'),
    'R16': (['G2', 'G7'], 'P2'),
    'R17': (['G2', 'G12'], 'P2'),
    'R18': (['G2', 'G14'], 'P2'),
    'R19': (['G6', 'G7'], 'P2'),
    'R20': (['G6', 'G12'], 'P2'),
    'R21': (['G6', 'G14'], 'P2'),
    'R22': (['G7', 'G12'], 'P2'),
    'R23': (['G7', 'G14'], 'P2'),
    'R24': (['G12', 'G14'], 'P2'),
    'R25': (['G1', 'G2', 'G6'], 'P2'),
    'R26': (['G1', 'G2', 'G7'], 'P2'),
    'R27': (['G1', 'G2', 'G12'], 'P2'),
    'R28': (['G1', 'G2', 'G14'], 'P2'),
    'R29': (['G1', 'G6', 'G7'], 'P2'),
    'R30': (['G1', 'G6', 'G12'], 'P2'),
    'R31': (['G1', 'G6', 'G14'], 'P2'),
    'R32': (['G1', 'G7', 'G12'], 'P2'),
    'R33': (['G1', 'G7', 'G14'], 'P2'),
    'R34': (['G1', 'G12', 'G14'], 'P2'),
    'R35': (['G2', 'G6', 'G7'], 'P2'),
    'R36': (['G2', 'G6', 'G12'], 'P2'),
    'R37': (['G2', 'G6', 'G14'], 'P2'),
    'R38': (['G2', 'G7', 'G12'], 'P2'),
    'R39': (['G2', 'G7', 'G14'], 'P2'),
    'R40': (['G2', 'G12', 'G14'], 'P2'),
    'R41': (['G6', 'G7', 'G12'], 'P2'),
    'R42': (['G6', 'G7', 'G14'], 'P2'),
    'R43': (['G6', 'G12', 'G14'], 'P2'),
    'R44': (['G7', 'G12', 'G14'], 'P2'),
    'R45': (['G1', 'G2', 'G6', 'G7'], 'P2'),
    'R46': (['G1', 'G2', 'G6', 'G12'], 'P2'),
    'R47': (['G1', 'G2', 'G6', 'G14'], 'P2'),
    'R48': (['G1', 'G2', 'G7', 'G12'], 'P2'),
    'R49': (['G1', 'G2', 'G7', 'G14'], 'P2'),
    'R50': (['G1', 'G2', 'G12', 'G14'], 'P2'),
    'R51': (['G1', 'G6', 'G7', 'G12'], 'P2'),
    'R52': (['G1', 'G6', 'G7', 'G14'], 'P2'),
    'R53': (['G1', 'G6', 'G12', 'G14'], 'P2'),
    'R54': (['G1', 'G7', 'G12', 'G14'], 'P2'),
    'R55': (['G2', 'G6', 'G7', 'G12'], 'P2'),
    'R56': (['G2', 'G6', 'G7', 'G14'], 'P2'),
    'R57': (['G2', 'G6', 'G12', 'G14'], 'P2'),
    'R58': (['G2', 'G7', 'G12', 'G14'], 'P2'),'R59': (['G6', 'G7', 'G12', 'G14'], 'P2'),
    'R60': (['G1', 'G2', 'G6', 'G7', 'G12'], 'P2'),
    'R61': (['G1', 'G2', 'G6', 'G7', 'G14'], 'P2'),
    'R62': (['G1', 'G2', 'G6', 'G12', 'G14'], 'P2'),
    'R63': (['G1', 'G2', 'G7', 'G12', 'G14'], 'P2'),
    'R64': (['G1', 'G6', 'G7', 'G12', 'G14'], 'P2'),
    'R65': (['G2', 'G6', 'G7', 'G12', 'G14'], 'P2'),
    'R66': (['G1', 'G2', 'G6', 'G7', 'G12', 'G14'], 'P2'),
    'R67': (['G3'], 'P3'),
    'R68': (['G4'], 'P4'),
    'R69': (['G8'], 'P4'),
    'R70': (['G15'], 'P4'),
    'R71': (['G4', 'G8'], 'P4'),
    'R72': (['G4', 'G15'], 'P4'),
    'R73': (['G8', 'G15'], 'P4'),
    'R74': (['G4', 'G8', 'G15'], 'P4'),
    'R75': (['G7'], 'P5'),
    'R76': (['G9'], 'P5'),
    'R77': (['G7', 'G9'], 'P5'),
    'R78': (['G10'], 'P6'),
    'R79': (['G11'], 'P6'),
    'R80': (['G10', 'G11'], 'P6'),
    'R81': (['G4'], 'P7'),
    'R82': (['G13'], 'P7'),
    'R83': (['G16'], 'P7'),
    'R84': (['G4', 'G13'], 'P7'),
    'R85': (['G4', 'G16'], 'P7'),
    'R86': (['G13', 'G16'], 'P7'),
    'R87': (['G4', 'G13', 'G16'], 'P7'),
    'R88': (['G13'], 'P8'),
    'R89': (['G16'], 'P8'),
    'R90': (['G13', 'G16'], 'P8'),
    'R91': (['G5'], 'P9'),
    'R92': (['G11'], 'P9'),
    'R93': (['G17'], 'P9'),
    'R94': (['G5', 'G11'], 'P9'),
    'R95': (['G5', 'G17'], 'P9'),
    'R96': (['G11', 'G17'], 'P9'),
    'R97': (['G5', 'G11', 'G17'], 'P9')
}


    predicted_diseases = set()
    for rule, (condition_codes, disease_code) in rules.items():
        if set(condition_codes) == matching_conditions:
            predicted_diseases.add(disease_code)

    if predicted_diseases:
        return [disease['penyakit'] for disease in diseases if disease['kode_penyakit'] in predicted_diseases]
    else:
        return ["Penyakit tidak ditemukan"]
